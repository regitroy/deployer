{"version":3,"sources":["redux/actionType.js","redux/actions/incDesc.js","components/Counter.js","serviceWorker.js","redux/reducer/math.js","redux/reducer/dashboard.js","redux/reducer/index.js","redux/store.js","components/common/Header.js","components/dashboard/CreateTaskModal.js","components/dashboard/DeployCard.js","redux/actions/index.js","redux/actions/dashboard.js","core/network/rest.js","core/network/index.js","core/network/apis.js","components/pages/DashBoard.js","components/pages/Login.js","index.js","logo.svg"],"names":["inc","by","type","actionType","desc","get","Counter","props","this","fetch","onClick","incr","count","React","Component","connect","state","mathOps","dispatch","incDesc","Boolean","window","location","hostname","match","initialState","showCreateModal","deployments","histories","combineReducers","action","dashboard","data","history","filter","d","_id","id","createStore","reducer","Header","Navbar","bg","variant","Brand","href","CreateTaskModal","setModalShow","onCreateModelHide","setUrl","event","target","value","setState","createNewData","url","setVersion","version","setVersionOptions","deploymentData","x","length","versions","templete","onFormSubmit","createHistory","modalShow","Modal","show","onHide","aria-labelledby","closeButton","Title","Body","className","Container","Row","Col","Form","Group","controlId","Label","Control","placeholder","onKeyUp","as","defaultValue","onChange","map","key","name","Button","modal","DeployCard","random","min","max","Math","floor","onDelete","progress","finishedProgress","newAddition","that","setInterval","isFinished","ProgressBar","animated","now","md","style","marginBottom","Card","Text","create_date","loader","showModal","hideModal","setDeploymentType","setHistory","addHistory","deleteHistory","axios","defaults","baseURL","headers","common","localStorage","getItem","post","LOGIN","REGISTER","GET_DEPLOYMENT","GET_HISTORY","CREATE_DEPLOYMENT","DELETE_DEPLOYMENT","path","onDone","then","response","success","toast","error","message","catch","console","log","msg","DashBoard","getHistory","network","resp","resetHistory","newAdded","bind","historyId","setDeployData","showCreateTaskModal","fontSize","historyData","h","card","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.7a2b7d4b.chunk.js","sourcesContent":["export default  {\n    INCR: \"INC\",\n    DESCR: \"DESC\",\n    GET: \"GET\",\n\n    SHOW_CREATE_TASK_MODAL: \"SHOW_CREATE_TASK_MODAL\",\n    HIDE_CREATE_TASK_MODAL: \"HIDE_CREATE_TASK_MODAL\",\n    SET_DEPLOYMENT_TYPE: \"SET_DEPLOYMENT_TYPE\",\n    ADD_DEPLOYMENT_HISTORY: \"ADD_DEPLOYMENT_HISTORY\",\n    RESET_DEPLOYMENT_HISTORY: \"RESET_DEPLOYMENT_HISTORY\",\n    DELETE_DEPLOYMENT_HISTORY: \"DELETE_DEPLOYMENT_HISTORY\"\n}","import actionType from '../actionType';\n\nexport default {\n    inc: (by) => {\n        return {\n            type: actionType.INCR,\n            by\n        }\n    },\n    desc: (by) => {\n        return {\n            type: actionType.DESCR,\n            by\n        }\n    },\n    get: () => {\n        return {\n            type: actionType.GET\n        }\n    }\n}","import React from 'react'\nimport { useDispatch, useSelector, connect } from 'react-redux';\nimport incDesc from '../redux/actions/incDesc'\n\nclass Counter extends React.Component {\n\n    // dispatch = useDispatch();\n    // count = useSelector(state => state.count);\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.props.fetch();\n    }\n\n    render() { \n        return (\n            <div>\n                <button onClick={this.props.incr}>+</button> {this.props.count} <button onClick={this.props.desc}>-</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{ \n        count: state.mathOps.count\n    }\n}\n \nconst mapDispatchToProps = dispatch => {\n    return {\n        incr: () => {\n            dispatch(incDesc.inc(2));\n        },\n        desc: () => {\n            dispatch(incDesc.desc(2));\n        },\n        fetch: () => {\n            dispatch(incDesc.get());\n        }\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter) ;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import actionType from '../actionType';\nlet initialState = {\n    count: 0\n}\n\nexport default (state = initialState, action) => {\n    switch(action.type) {\n        case actionType.INCR: \n            return {...state, ...{count: state.count + 1}};\n        case actionType.DESCR: \n            return {...state, ...{count: state.count - 1}};\n        case actionType.GET: \n            return state;\n        default:\n            return state;\n    }\n}","import actionType from '../actionType';\nlet initialState = {\n    showCreateModal: false,\n    deployments: [],\n    histories: []\n}\n\nexport default (state = initialState, action) => {\n    switch(action.type){\n        case actionType.SHOW_CREATE_TASK_MODAL:\n            return {\n                ...state,\n                ...{showCreateModal: true}\n            }\n        case actionType.HIDE_CREATE_TASK_MODAL:\n            return {\n                ...state,\n                ...{showCreateModal: false}\n            }\n        case actionType.SET_DEPLOYMENT_TYPE: \n            return {\n                ...state,\n                ...{deployments: action.data}\n            }\n        case actionType.ADD_DEPLOYMENT_HISTORY: \n            return {\n                ...state,\n                ...{histories: [...state.histories, action.data]}\n            }\n        case actionType.RESET_DEPLOYMENT_HISTORY:\n            return {\n                ...state,\n                ...{histories: action.data}\n            }\n        case actionType.DELETE_DEPLOYMENT_HISTORY: \n            let history = state.histories.filter((d) => {\n                return d._id != action.id\n            })\n            return {\n                ...state,\n                ...{histories: history}\n            }\n        default:\n            return state;\n    }\n}\n","import mathOps from './math';\nimport dashboard from './dashboard';\nimport {combineReducers} from 'redux';\n\nexport default combineReducers({\n    mathOps,\n    dashboard\n})","import {createStore} from 'redux';\nimport reducer from './reducer';\n\nexport default createStore(reducer);","import React, { Component } from 'react';\nimport {Navbar, Nav, Form, FormControl, Button} from 'react-bootstrap';\n\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n    render() { \n        return ( \n            <Navbar bg=\"primary\" variant=\"dark\">\n                <Navbar.Brand href=\"#home\">Deployer</Navbar.Brand>\n            </Navbar>\n        );\n    }\n}\n \nexport default Header;","import React, { Component } from 'react';\nimport {Modal, Row, Container, Col, Button, Form} from 'react-bootstrap';\n\nclass CreateTaskModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            modalShow: false,\n            versions: [],\n            createNewData: {\n                templete: \"\",\n                url: \"\",\n                version: \"\"\n            }\n        }\n    }\n\n    setModalShow = () => {\n        this.props.onCreateModelHide();\n    }\n\n    setUrl = (event) => {\n        if(!event.target.value){\n            return;\n        }\n        this.setState({\n            createNewData: {\n                ...this.state.createNewData,\n                ...{url: event.target.value}\n            }\n        });\n    }\n\n    setVersion = (event) => {\n        if(!event.target.value){\n            return;\n        }\n        this.setState({\n            createNewData: {\n                ...this.state.createNewData,\n                ...{version: event.target.value}\n            }\n        });\n    }\n\n    setVersionOptions = (event) => {\n        let id = event.target.value;\n        let deploymentData = this.props.deploymentData.filter(x => {\n            return x._id == id;\n        })\n        if(deploymentData.length == 0){\n            return;\n        }\n        this.setState({\n            versions: deploymentData[0].versions,\n            createNewData: {\n                ...this.state.createNewData,\n                ...{templete: event.target.value}\n            }\n        });\n    }\n\n    onFormSubmit = () => {\n        this.props.createHistory(this.state.createNewData);\n        this.props.onCreateModelHide();\n    }\n\n    modal(){\n        return (\n            <Modal \n                show={this.props.show} \n                onHide={() => this.setModalShow(false)} \n                aria-labelledby=\"contained-modal-title-vcenter\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\n                        Create New Deployment\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body className=\"show-grid\">\n                    <Container>\n                        <Row>\n                            <Col>\n                                {/* <Form onSubmit={return false}> */}\n                                    <Form.Group controlId=\"formBasicEmail\">\n                                        <Form.Label>URL</Form.Label>\n                                        <Form.Control type=\"text\" placeholder=\"Enter url\" onKeyUp={this.setUrl} />\n                                    </Form.Group>\n\n                                    <Form.Group controlId=\"formBasicPassword\">\n                                        <Form.Label>Templete Name</Form.Label>\n                                        <Form.Control as=\"select\" \n                                            defaultValue=\"Choose...\"\n                                            onChange={this.setVersionOptions}\n                                            >\n                                            <option>Choose...</option>\n                                            {\n                                                this.props.deploymentData.map(d => {\n                                                    return(\n                                                        <option key={d._id} value={d._id}>{d.name}</option>\n                                                    );\n                                                })\n                                            }\n                                        </Form.Control>\n                                    </Form.Group>\n\n                                    <Form.Group controlId=\"formBasicPassword\">\n                                        <Form.Label>Version</Form.Label>\n                                        <Form.Control as=\"select\" defaultValue=\"Choose...\"\n                                            onChange={this.setVersion}\n                                            >\n                                            <option>Choose...</option>\n                                            {\n                                                this.state.versions.map(d => {\n                                                    return(\n                                                        <option key={d} value={d}>{d}</option>\n                                                    );\n                                                })\n                                            }\n                                        </Form.Control>\n                                    </Form.Group>\n                                    <Button variant=\"primary\" type=\"submit\" onClick={this.onFormSubmit}>\n                                        Submit\n                                    </Button>\n                                {/* </Form> */}\n                            </Col>\n                        </Row>\n                    </Container>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n\n    render() {\n        return this.modal();\n    }\n}\n\nexport default CreateTaskModal;","import React, { Component } from 'react';\nimport {Container, Row, Col, Card, Button, ProgressBar} from 'react-bootstrap';\nclass DeployCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            progress: 0,\n            finishedProgress: false\n        }\n    }\n\n    random = (min, max) => {\n        return Math.floor(Math.random() * max) + min;\n    }\n\n    componentDidMount(){\n        if(this.props.newAddition){\n            this.setState({\n                progress: 0,\n                finishedProgress: false\n            })\n            let that = this;\n            setInterval(() => {\n                let isFinished = false;\n                let progress = that.state.progress + that.random(1, 10);\n                if(progress >= 100){\n                    isFinished = true;\n                }\n                that.setState({\n                    progress: progress,\n                    finishedProgress: isFinished\n                })\n            }, 400)\n        }else{\n            this.setState({\n                progress: 0,\n                finishedProgress: true\n            })\n        }\n    }\n\n    loader() {\n        return (\n            <div>\n                <ProgressBar animated now={this.state.progress} />\n            </div>\n        );\n    }\n\n    onDelete = (id) => {\n        this.props.onDelete(id);\n    }\n\n    render() { \n        let data = this.props.data;\n        return (\n            <Col md=\"4\" style={{marginBottom: 20}}>\n                <Card>\n                    <Card.Body>\n                        <Card.Title>{data.name}</Card.Title>\n                        <Card.Text> Version: {data.version}</Card.Text>\n                        <Card.Text>Date: {data.create_date}</Card.Text>\n                        \n                        {this.state.finishedProgress ? (\n                            <p>\n                                <Button variant=\"danger\" onClick={() => this.onDelete(data._id)}>Delete</Button>\n                            </p> \n                        ): this.loader()}\n                    </Card.Body>\n                </Card>\n            </Col>\n        );\n    }\n}\n \nexport default DeployCard;","import incDesc from './incDesc';\nimport dashboard from './dashboard';\n\nexport default {\n    incDesc,\n    dashboard\n}","import actionType from '../actionType';\n\nexport default {\n    showModal: () => {\n        return {\n            type: actionType.SHOW_CREATE_TASK_MODAL\n        }\n    },\n    hideModal: () => {\n        return {\n            type: actionType.HIDE_CREATE_TASK_MODAL\n        }\n    },\n    setDeploymentType: (data) => {\n        return {\n            type: actionType.SET_DEPLOYMENT_TYPE,\n            data\n        }\n    },\n    setHistory: (data) => {\n        return {\n            type: actionType.RESET_DEPLOYMENT_HISTORY,\n            data\n        }\n    },\n    addHistory: (data) => {\n        return {\n            type: actionType.ADD_DEPLOYMENT_HISTORY,\n            data\n        }\n    },\n    deleteHistory: (id) => {\n        return {\n            type: actionType.DELETE_DEPLOYMENT_HISTORY,\n            id\n        }\n    }\n}","import axios from 'axios';\nimport { toast } from 'react-toastify';\n\naxios.defaults.baseURL = 'https://morning-taiga-49889.herokuapp.com';\naxios.defaults.headers.common['Authorization'] = localStorage.getItem('token');\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n\nexport default {\n    post: (path, data, onDone) => {\n        axios.post(path, data)\n        .then(function (response) {\n            if(!response.data.success){\n                toast.error(response.data.message);\n                return;\n            }\n            onDone(response.data.data);\n        }).catch(function (error) {\n            console.log(\"ERROR -> \", error);\n            toast(\"Something went wrong.\");\n        });\n    },\n    get: (path, onDone) => {\n        axios.get(path)\n        .then(function (response) {\n            if(!response.data.success){\n                toast.error(response.data.message);\n                return;\n            }\n            onDone(response.data.data);\n        })\n        .catch(function (error) {\n            toast(\"Something went wrong.\");\n        })\n    },\n    success: (msg) => {\n        toast.success(msg);\n    }\n}","import apis from './apis';\nimport rest from './rest';\n\nexport default {\n    apis,\n    rest\n}","export default {\n    LOGIN: '/login',\n    REGISTER: '/register',\n\n    GET_DEPLOYMENT: '/deployment',\n    GET_HISTORY: '/deployment/history',\n    CREATE_DEPLOYMENT: '/deployment',\n    DELETE_DEPLOYMENT: '/deployment/delete'\n}","import React, { Component } from 'react';\nimport Header from '../common/Header';\nimport CreateTaskModal from '../dashboard/CreateTaskModal';\nimport DeployCard from '../dashboard/DeployCard';\nimport {Container, Row, Col, Card, Button, ProgressBar} from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport action from '../../redux/actions';\nimport network from '../../core/network';\n\nclass DashBoard extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillMount() {\n        network.rest.get(network.apis.GET_DEPLOYMENT, (resp) => {\n            this.props.setDeployData(resp);\n        })\n\n        this.getHistory();\n    }\n\n    getHistory = () => {\n        network.rest.get(network.apis.GET_HISTORY, (resp) => {\n            this.props.resetHistory(resp);\n        })\n    }\n\n    createHistory = (data) => {\n        let that = this;\n        network.rest.post(network.apis.CREATE_DEPLOYMENT, data, function(resp){\n            console.log(\"THIS -> \", this.props);\n            network.rest.success(\"Created new deployment.\");\n            resp.newAdded = true;\n            this.props.addHistory(resp);\n        }.bind(this));\n    }\n\n    onDelete = (id) => {\n        let that = this;\n        network.rest.post(network.apis.DELETE_DEPLOYMENT, {historyId: id}, function(resp) {\n            network.rest.success(\"History deleted.\");\n        }.bind(this));\n        this.props.onDelete(id);\n    }\n\n    card() {\n        return (\n            <Card>\n                <Card.Header as=\"h5\">\n                    Deploying <Button onClick={this.props.showCreateTaskModal} style={{fontSize: 11}}>Create New</Button>\n                </Card.Header>\n                <Card.Body>\n                    {\n                        (this.props.historyData.length == 0) ? \n                            <Card.Title>No Deployment</Card.Title> : \"\"\n                    }\n                    \n                    <Row>\n                        {\n                            this.props.historyData.map(h => {\n                                return <DeployCard \n                                    key={h._id}\n                                    newAddition={h.newAdded} \n                                    data={h}\n                                    onDelete={this.onDelete}\n                                />\n                            })\n                        }\n                    </Row>\n                </Card.Body>\n            </Card>\n        );\n    }\n\n    render() { \n        return (\n            <>\n                <Header />\n                <br/>\n                <Container>\n                    <Row>\n                        <Col>\n                            {this.card()}\n                            \n                        </Col>\n                    </Row>\n                </Container>\n                <CreateTaskModal \n                    show={this.props.showCreateModal} \n                    onCreateModelHide={this.props.onCreateModelHide}\n                    deploymentData={this.props.deploymentData}\n                    createHistory={this.createHistory} />\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return{ \n        showCreateModal: state.dashboard.showCreateModal,\n        deploymentData: state.dashboard.deployments,\n        historyData: state.dashboard.histories\n    }\n}\n \nconst mapDispatchToProps = dispatch => {\n    return {\n        showCreateTaskModal: () => {\n            dispatch(action.dashboard.showModal());\n        },\n        onCreateModelHide: () => {\n            dispatch(action.dashboard.hideModal());\n        },\n        setDeployData: (data) => {\n            dispatch(action.dashboard.setDeploymentType(data));\n        },\n        addHistory: (data) => {\n            dispatch(action.dashboard.addHistory(data));\n        },\n        resetHistory: (data) => {\n            dispatch(action.dashboard.setHistory(data));\n        },\n        onDelete: (id) => {\n            dispatch(action.dashboard.deleteHistory(id));\n        }\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(DashBoard);","import React, { Component } from 'react';\nimport Header from '../common/Header';\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n    render() { \n        return (\n            <Header />\n        );\n    }\n}\n \nexport default Login;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\nimport { Route, Link, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport DashBoard from './components/pages/DashBoard';\nimport Login from './components/pages/Login';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nReactDOM.render(\n  <Provider store={store}>\n      <div>\n        <ToastContainer />\n      </div>\n      \n      <Router>\n        <Switch>\n        <div>\n          <Route path=\"/\">\n            <DashBoard/>\n          </Route>\n        </div>\n        </Switch>\n      </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}